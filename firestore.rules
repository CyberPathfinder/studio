/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for data stored under `/users/{userId}/**`.
 *
 * Data Structure:
 * All user-specific data (quiz responses, drafts) is nested under `/users/{userId}`.
 * Quiz definitions are stored in a top-level `/quizzes/{quizId}` collection.
 *
 * Key Security Decisions:
 * - **Strict Ownership**: Only the authenticated user matching the `userId` path segment can read or write data under their `/users/{userId}` path.
 * - **Public Quizzes**: Quiz definitions in `/quizzes/{quizId}` are publicly readable.
 * - **No User Listing**: Listing users is not permitted.
 *
 * Authorization Strategy:
 *  Path-based ownership is used for all user-specific data.
 *  Quiz definitions are considered public data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Determines if the request is made by the owner of the resource.
     * @param {string} userId - The user ID from the path.
     * @return {bool} True if the user is signed in and their UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Determines if the user is signed in.
     * @return {bool} True if request.auth is not null.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Allows public read access to quiz definitions. Write access is denied.
     * @path /quizzes/{quizId}
     * @allow (get, list) - Any user (signed in or not) can read quiz definitions.
     * @deny (create, update, delete) - No user can create, update, or delete quiz definitions through the client.
     * @principle Public read, restricted write.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to questions for a quiz. Write access is denied.
     * @path /quizzes/{quizId}/questions/{questionId}
     * @allow (get, list) - Any user (signed in or not) can read questions.
     * @deny (create, update, delete) - No user can create, update, or delete questions through the client.
     * @principle Public read, restricted write.
     */
    match /quizzes/{quizId}/questions/{questionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage the root profile document stored at /users/{userId}.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Only the user with ID {userId} can manage their root profile document.
     * @deny (list) - Listing all users is disallowed to protect privacy.
     * @principle Enforces document ownership while preventing user enumeration.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
      allow list: if false;
    }

    /**
     * @description Enforces strict user-ownership for stored intake results.
     * @path /users/{userId}/intake/{intakeDocId}
     * @allow (get, list, create, update, delete) - Only the user with ID {userId} can perform these actions.
     * @deny (get, list, create, update, delete) - Any other user attempting these actions will be denied.
     * @principle Keeps health intake data private to the owner.
     */
    match /users/{userId}/intake/{intakeDocId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces strict user-ownership for quiz responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}
     * @allow (get, list, create, update, delete) - Only the user with ID {userId} can perform these actions.
     * @deny (get, list, create, update, delete) - Any other user attempting these actions will be denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_responses/{quizResponseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces strict user-ownership for question responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId}
     * @allow (get, list, create, update, delete) - Only the user with ID {userId} can perform these actions.
     * @deny (get, list, create, update, delete) - Any other user attempting these actions will be denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces strict user-ownership for intake drafts.
     * @path /users/{userId}/intake_drafts/{quizId}
     * @allow (get, list, create, update, delete) - Only the user with ID {userId} can perform these actions.
     * @deny (get, list, create, update, delete) - Any other user attempting these actions will be denied.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/intake_drafts/{quizId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}