/**
 * @fileoverview Firestore Security Rules for the Quiz Engine application.
 *
 * Core Philosophy:
 * This ruleset employs a strict path-based ownership model for user-specific data
 * (quiz responses and drafts) while allowing public read access to quiz definitions.
 *
 * Data Structure:
 * - /quizzes/{quizId}: Publicly readable quiz definitions.
 * - /quizzes/{quizId}/questions/{questionId}: Publicly readable question definitions.
 * - /users/{userId}/quiz_responses/{quizResponseId}: User-specific quiz responses.
 * - /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId}: User-specific question responses.
 * - /users/{userId}/intake_drafts/{quizId}: User-specific quiz drafts for resuming flows.
 *
 * Key Security Decisions:
 * - Quiz definitions and questions are publicly readable.
 * - Quiz responses and drafts are strictly user-owned.
 * - Listing of quiz responses and drafts is only allowed for the owner.
 * - Schema validation is relaxed to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - Path-based ownership is used to avoid `get()` calls for authorization.
 *   The `userId` is embedded in the path for quiz responses and drafts,
 *   eliminating the need to read the document to determine ownership.
 *
 * Structural Segregation:
 * - Quiz definitions are stored in a top-level collection (/quizzes) separate
 *   from user-specific data (under /users/{userId}), enabling public read access
 *   to quiz definitions without exposing user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to quiz definitions. Only the owner can modify the data.
     * @path /quizzes/{quizId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, restricts writes to the owner.
     */
    match /quizzes/{quizId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // CRITICAL: Cannot implement owner-only writes. The 'Quiz' entity is missing an 'ownerId' or 'authorId' field.
      allow update: if false;  // CRITICAL: Cannot implement owner-only writes. The 'Quiz' entity is missing an 'ownerId' or 'authorId' field.
      allow delete: if false;  // CRITICAL: Cannot implement owner-only writes. The 'Quiz' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows public read access to question definitions. Only the owner can modify the data.
     * @path /quizzes/{quizId}/questions/{questionId}
     * @allow get, list: if true;
     * @allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public reads, restricts writes to the owner.
     */
    match /quizzes/{quizId}/questions/{questionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // CRITICAL: Cannot implement owner-only writes. The 'Question' entity is missing an 'ownerId' or 'authorId' field.
      allow update: if false; // CRITICAL: Cannot implement owner-only writes. The 'Question' entity is missing an 'ownerId' or 'authorId' field.
      allow delete: if false; // CRITICAL: Cannot implement owner-only writes. The 'Question' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Allows the owner to read, create, update, and delete their quiz responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_responses/{quizResponseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to read, create, update, and delete their question responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows the owner to read, create, update, and delete their quiz drafts.
     * @path /users/{userId}/intake_drafts/{quizId}
     * @allow get: if isOwner(userId);
     * @allow list: if isOwner(userId);
     * @allow create: if isOwner(userId);
     * @allow update: if isExistingOwner(userId);
     * @allow delete: if isExistingOwner(userId);
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/intake_drafts/{quizId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    // --- Helper functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}