/**
 * @fileoverview Firestore Security Rules for the quiz application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-generated content (quiz responses and intake drafts) and allows public read access to quiz definitions.
 *
 * Data Structure:
 * - /quizzes/{quizId}: Stores publicly readable quiz definitions.
 * - /users/{userId}/quiz_responses/{quizResponseId}: Stores a user's quiz responses.
 * - /users/{userId}/intake_drafts/{quizId}: Stores a user's draft quiz responses (for resuming flows).
 *
 * Key Security Decisions:
 * - User data is segregated under /users/{userId} to enforce ownership.
 * - Listing of user-specific collections (quiz_responses, intake_drafts) is allowed only for the owner.
 * - Quiz definitions are publicly readable to support QAPs.
 *
 * Denormalization for Authorization:
 * - User-specific data is nested under /users/{userId} to enable path-based authorization, avoiding the need for `get()` calls to verify ownership.
 * - The application enforces a homogeneous security posture using dedicated collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read quiz definitions; only allows create, update, and delete for existing owners.
     * @path /quizzes/{quizId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid != null
     * @allow (update, delete): if false
     * @deny (create): if request.auth.uid == null
     * @principle Public read access with owner-only writes.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Allows anyone to read questions; only allows create, update, and delete for existing owners.
     * @path /quizzes/{quizId}/questions/{questionId}
     * @allow (get, list): if true
     * @allow (create): if request.auth.uid != null
     * @allow (update, delete): if false
     * @deny (create): if request.auth.uid == null
     * @principle Public read access with owner-only writes.
     */
    match /quizzes/{quizId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }

    /**
     * @description Manages user's quiz responses.  Allows only the owner to read, create, update, and delete their responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny (get, list, create, update, delete): if !isSignedIn()
     * @deny (create): if !isOwner(userId)
     * @deny (update, delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_responses/{quizResponseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages question responses within a quiz response. Allows only the owner to read, create, update, and delete.
     * @path /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny (get, list, create, update, delete): if !isSignedIn()
     * @deny (create): if !isOwner(userId)
     * @deny (update, delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user's intake drafts, allowing resuming flows. Allows only the owner to read, create, update and delete.
     * @path /users/{userId}/intake_drafts/{quizId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update, delete): if isExistingOwner(userId)
     * @deny (get, list, create, update, delete): if !isSignedIn()
     * @deny (create): if !isOwner(userId)
     * @deny (update, delete): if !isExistingOwner(userId)
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/intake_drafts/{quizId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}