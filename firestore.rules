/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data.
 *
 * Data Structure:
 * All user-specific data is nested under the `/users/{userId}` collection. Each user has a profile document directly in `/users/{userId}` and an initial intake document in the `/users/{userId}/intake/initial` path.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data. Listing all users is disallowed.
 * - The rules rely on path-based authorization, avoiding the need for `get()` calls to external documents. This improves performance and simplifies the rules.
 * - Data consistency between the path and the document's `userId` field is enforced on creation to prevent unauthorized data placement.
 *
 * Denormalization for Authorization:
 * The `userId` is included in both the path and the User and UserIntake documents to allow for efficient, path-based authorization.
 *
 * Structural Segregation:
 * User profiles and intake data are stored in separate locations to maintain a clear separation of concerns and simplify security management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth UID can create their profile.
     * @allow (get, update, delete) Authenticated user can access their own profile.
     * @deny (create) User attempts to create a profile with an ID that does not match their auth UID.
     * @deny (get, list, update, delete) Unauthorized user attempts to access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; // Enforce immutability of userId.
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for intake data. Only the authenticated user can read/write their own intake data.
     * @path /users/{userId}/intake/initial
     * @allow (create) User with ID matching auth UID can create their intake data.
     * @allow (get, update, delete) Authenticated user can access their own intake data.
     * @deny (create) User attempts to create intake data with an ID that does not match their auth UID.
     * @deny (get, list, update, delete) Unauthorized user attempts to access another user's intake data.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/intake/initial {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all intake documents is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId; // Enforce immutability of userId.
      allow delete: if isExistingOwner(userId);
    }
  }
}