/**
 * @fileoverview Firestore Security Rules for the quiz application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to quiz definitions.  All write operations
 * on user-specific data are restricted to the authenticated user.
 *
 * Data Structure:
 * - /quizzes/{quizId}: Publicly readable quiz definitions.
 * - /users/{userId}/quiz_responses/{quizResponseId}: User-specific quiz responses.
 * - /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId}: Individual question responses.
 * - /users/{userId}/intake_drafts/{quizId}: User-specific quiz drafts.
 *
 * Key Security Decisions:
 * - Quiz definitions are publicly readable to support QAPs.
 * - All user data is nested under /users/{userId} to enforce ownership.
 * - Listing of user documents is allowed by the owner.
 *
 * Denormalization for Authorization:
 * - Path-based ownership is used throughout the /users/{userId} tree to avoid
 *   costly get() calls. The userId is encoded in the path, making authorization
 *   simple and efficient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated and the user ID matches the provided ID.
     * @param {string} userId - The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is signed in and the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
        return request.auth != null;
    }

    /**
     * @description Allows public read access to quiz definitions. Only the owner can modify.
     * @path /quizzes/{quizId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if false
     * @deny (create): if !isSignedIn()
     * @principle Allows QAPs and restricts writes to owner.
     */
    match /quizzes/{quizId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows public read access to questions within a quiz. Only the owner can modify.
     * @path /quizzes/{quizId}/questions/{questionId}
     * @allow (get, list): if true
     * @allow (create): if isSignedIn()
     * @allow (update, delete): if false
     * @deny (create): if !isSignedIn()
     * @principle Allows QAPs and restricts writes to owner.
     */
    match /quizzes/{quizId}/questions/{questionId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for quiz responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update, delete): if isOwner(userId)
     * @deny (get, list): if !isOwner('otherUserId')
     * @deny (create): if request.auth.uid != userId
     * @deny (update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quiz_responses/{quizResponseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for question responses.
     * @path /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update, delete): if isOwner(userId)
     * @deny (get, list): if !isOwner('otherUserId')
     * @deny (create): if request.auth.uid != userId
     * @deny (update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quiz_responses/{quizResponseId}/question_responses/{questionResponseId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for intake drafts.
     * @path /users/{userId}/intake_drafts/{quizId}
     * @allow (get, list): if isOwner(userId)
     * @allow (create): if isOwner(userId)
     * @allow (update, delete): if isOwner(userId)
     * @deny (get, list): if !isOwner('otherUserId')
     * @deny (create): if request.auth.uid != userId
     * @deny (update, delete): if !isOwner(userId)
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/intake_drafts/{quizId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Default deny rule for all other paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}